module Absmatal where

-- Haskell module generated by the BNF converter


newtype Ident = Ident String deriving (Eq,Ord,Show)
data Program =
   Progr [External_declaration]
  deriving (Eq,Ord,Show)

data External_declaration =
   Afunc Function_def
 | Global Dec
 | StructDec Struct_spec
  deriving (Eq,Ord,Show)

data Declarator =
   Dvariable Type_specifier Ident
  deriving (Eq,Ord,Show)

data Dec =
   Declaration Declarator
  deriving (Eq,Ord,Show)

data Type_specifier =
   Tvoid
 | Tint
 | Tbool
 | Tstruct Ident
 | Tarray Type_specifier
 | Tmap Type_specifier Type_specifier
  deriving (Eq,Ord,Show)

data Struct_spec =
   Struct Ident [Dec]
  deriving (Eq,Ord,Show)

data Function_def =
   FuncNoParams Declarator Compound_stm
 | FuncParams Declarator Parameter_declarations Compound_stm
  deriving (Eq,Ord,Show)

data Parameter_declarations =
   ParamDec Declarator
 | MoreParamDec Parameter_declarations Declarator
  deriving (Eq,Ord,Show)

data Stm =
   CompS Compound_stm
 | ExprS Expression_stm
 | SelS Selection_stm
 | IterS Iter_stm
 | JumpS Jump_stm
 | PrintS Print_stm
 | InitS Init_stm
  deriving (Eq,Ord,Show)

data Compound_stm =
   ScompOne
 | ScompTwo [Stm]
 | ScompThree [Dec] [Stm]
  deriving (Eq,Ord,Show)

data Expression_stm =
   SexprOne
 | SexprTwo Exp
  deriving (Eq,Ord,Show)

data Selection_stm =
   SselOne Exp Stm
 | SselTwo Exp Stm Stm
  deriving (Eq,Ord,Show)

data Iter_stm =
   SiterOne Exp Stm
 | SiterThree Expression_stm Expression_stm Stm
 | SiterFour Expression_stm Expression_stm Exp Stm
  deriving (Eq,Ord,Show)

data Jump_stm =
   SjumpFive Exp
  deriving (Eq,Ord,Show)

data Print_stm =
   Sprint Exp
  deriving (Eq,Ord,Show)

data Init_stm =
   Sinit Ident Exp
  deriving (Eq,Ord,Show)

data Exp =
   Ecomma Exp Exp
 | Eassign Exp Assignment_op Exp
 | Eeq Exp Exp
 | Eneq Exp Exp
 | Elthen Exp Exp
 | Egrthen Exp Exp
 | Ele Exp Exp
 | Ege Exp Exp
 | Eplus Exp Exp
 | Eminus Exp Exp
 | Etimes Exp Exp
 | Ediv Exp Exp
 | Eselect Exp Ident
 | Earray Exp Exp
 | Efunk Exp
 | Efunkpar Exp [Exp]
 | Emap Exp Exp
 | Epostinc Exp
 | Epostdec Exp
 | Evar Ident
 | Econst Constant
  deriving (Eq,Ord,Show)

data Constant =
   Eint Integer
 | Etrue
 | Efalse
  deriving (Eq,Ord,Show)

data Assignment_op =
   Assign
 | AssignMul
 | AssignDiv
 | AssignAdd
 | AssignSub
  deriving (Eq,Ord,Show)

