-- Aleksander Matusiak
-- EBNF grammar of Matal language

entrypoints Program, Stm, Exp ;

Progr.  Program ::= [External_declaration] ;

(:[]).    [External_declaration] ::= External_declaration;
(:).      [External_declaration] ::= External_declaration [External_declaration];

Afunc.      External_declaration ::= Function_def ;
Global.     External_declaration ::= Dec ;
StructDec.  External_declaration ::= Struct_spec;

Dvariable.      Declarator ::= Type_specifier Ident ;

Declaration.     Dec ::= Declarator ";";

(:[]).   [Dec] ::= Dec ;
(:).     [Dec] ::= Dec [Dec] ;

Tvoid.        Type_specifier ::= "void";
Tint.         Type_specifier ::= "int";
Tbool.        Type_specifier ::= "bool";
Tstruct.      Type_specifier ::= Ident;
Tarray.       Type_specifier ::= Type_specifier "[]" ;
Tmap.         Type_specifier ::= Type_specifier "<<" Type_specifier ">>" ;

Struct.      Struct_spec ::= "struct" Ident "{" [Dec] "}" ;

(:[]).   [Ident] ::= Ident ;
(:).     [Ident] ::= Ident "," [Ident] ;

FuncNoParams.   Function_def ::= Declarator "(" ")" Compound_stm;
FuncParams.   Function_def ::= Declarator "(" Parameter_declarations ")" Compound_stm;

ParamDec.     Parameter_declarations ::= Declarator ;
MoreParamDec. Parameter_declarations ::= Parameter_declarations "," Declarator ;

CompS.    Stm ::= Compound_stm ;
ExprS.    Stm ::= Expression_stm;
SelS.     Stm ::= Selection_stm;
IterS.    Stm ::= Iter_stm;
JumpS.    Stm ::= Jump_stm;
PrintS.   Stm ::= Print_stm;
InitS.    Stm ::= Init_stm;

ScompOne.   Compound_stm ::= "{" "}" ;
ScompTwo.   Compound_stm ::= "{" [Stm] "}" ;
ScompThree.  Compound_stm ::= "{" [Dec] [Stm] "}" ;

SexprOne.   Expression_stm ::= ";" ;
SexprTwo.   Expression_stm ::= Exp ";" ;

SselOne.    Selection_stm ::= "if" "(" Exp ")" Stm ;
SselTwo.    Selection_stm ::= "if" "(" Exp ")" Stm "else" Stm ;

SiterOne.   Iter_stm ::= "while" "(" Exp ")" Stm;
SiterThree. Iter_stm ::= "for" "(" Expression_stm Expression_stm ")" Stm ;
SiterFour.  Iter_stm ::= "for" "(" Expression_stm Expression_stm Exp ")" Stm;

SjumpFive.  Jump_stm ::= "return" Exp ";" ;

Sprint.     Print_stm ::= "print" Exp ";" ;

Sinit.      Init_stm ::= "init" Ident "[" Exp "]" ";" ;

(:[]).   [Stm] ::= Stm ;
(:).     [Stm] ::= Stm [Stm];

Ecomma.       Exp ::= Exp "," Exp1;
Eassign.      Exp1 ::= Exp4 Assignment_op Exp1;
Eeq.          Exp2  ::= Exp2 "==" Exp3;
Eneq.         Exp2  ::= Exp2 "!=" Exp3;
Elthen.       Exp3 ::= Exp3 "<" Exp4;
Egrthen.      Exp3 ::= Exp3 ">" Exp4;
Ele.          Exp3 ::= Exp3 "<=" Exp4;
Ege.          Exp3 ::= Exp3 ">=" Exp4;
Eplus.        Exp4 ::= Exp4 "+" Exp3;
Eminus.       Exp4 ::= Exp4 "-" Exp3;
Etimes.       Exp5 ::= Exp5 "*" Exp4;
Ediv.         Exp5 ::= Exp5 "/" Exp4;
Eselect.      Exp6 ::= Exp6 "." Ident;
Earray.       Exp6 ::= Exp6 "[" Exp "]" ;
Efunk.        Exp6 ::= Exp6 "(" ")";
Efunkpar.     Exp6 ::= Exp6 "(" [Exp1] ")";
Emap.         Exp6 ::= Exp6 "<<" Exp ">>" ;
Epostinc.     Exp7 ::= Exp7 "++";
Epostdec.     Exp7 ::= Exp7 "--";
Evar.         Exp8 ::= Ident;
Econst.       Exp8 ::= Constant;

Eint.         Constant ::= Integer;
Etrue.        Constant ::= "true";
Efalse.        Constant ::= "false";

_. Exp ::= Exp1;
_. Exp1 ::= Exp2;
_. Exp2 ::= Exp3;
_. Exp3 ::= Exp4;
_. Exp4 ::= Exp5;
_. Exp5 ::= Exp6;
_. Exp6 ::= Exp7;
_. Exp7 ::= Exp8;
_. Exp8 ::= "(" Exp ")";

(:[]).   [Exp1] ::= Exp1 ;
(:).     [Exp1] ::= Exp1 "," [Exp1];

Assign.       Assignment_op ::= "=" ;
AssignMul.    Assignment_op ::= "*=" ;
AssignDiv.    Assignment_op ::= "/=" ;
AssignAdd.    Assignment_op ::= "+=" ;
AssignSub.    Assignment_op ::= "-=" ;

comment "/*" "*/" ;
comment "//";
