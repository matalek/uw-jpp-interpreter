-- Aleksander Matusiak
-- EBNF grammar of Matal language

entrypoints Program, Stmt, Exp ;

Progr.  Program ::= [External_declaration] ;

(:[]).    [External_declaration] ::= External_declaration;
(:).      [External_declaration] ::= External_declaration [External_declaration];

Afunc.      External_declaration ::= Function_def ;
Global.     External_declaration ::= Dec ;
StructDec.  External_declaration ::= Struct_spec;

DVariable.      Declarator ::= Type_specifier Ident ;

Declaration.     Dec ::= Declarator ";";

(:[]).   [Dec] ::= Dec ;
(:).     [Dec] ::= Dec [Dec] ;

TVoid.        Type_specifier ::= "void";
TInt.         Type_specifier ::= "int";
TBool.        Type_specifier ::= "bool";
TStruct.      Type_specifier ::= Ident;
TArray.       Type_specifier ::= Type_specifier "[]" ;
TMap.         Type_specifier ::= Type_specifier "<<" Type_specifier ">>" ;

Struct.      Struct_spec ::= "struct" Ident "{" [Dec] "}" ;

(:[]).   [Ident] ::= Ident ;
(:).     [Ident] ::= Ident "," [Ident] ;

FuncNoParams.   Function_def ::= Declarator "(" ")" Compound_Stmt;
FuncParams.   Function_def ::= Declarator "(" Parameter_declarations ")" Compound_Stmt;

ParamDec.     Parameter_declarations ::= Declarator ;
MoreParamDec. Parameter_declarations ::= Parameter_declarations "," Declarator ;

SComp.    Stmt ::= Compound_Stmt ;
SExpr.    Stmt ::= Expression_Stmt;
SSel.     Stmt ::= Selection_Stmt;
SIter.    Stmt ::= Iter_Stmt;
SJump.    Stmt ::= Jump_Stmt;
SPrint.   Stmt ::= Print_Stmt;
SInit.    Stmt ::= Init_Stmt;

SCompOne.   Compound_Stmt ::= "{" "}" ;
SCompTwo.   Compound_Stmt ::= "{" [Stmt] "}" ;
SCompThree.  Compound_Stmt ::= "{" [Dec] [Stmt] "}" ;

SExprOne.   Expression_Stmt ::= ";" ;
SExprTwo.   Expression_Stmt ::= Exp ";" ;

SSelOne.    Selection_Stmt ::= "if" "(" Exp ")" Stmt ;
SSelTwo.    Selection_Stmt ::= "if" "(" Exp ")" Stmt "else" Stmt ;

SIterOne.   Iter_Stmt ::= "while" "(" Exp ")" Stmt;
SIterTwo. Iter_Stmt ::= "for" "(" Expression_Stmt Expression_Stmt ")" Stmt ;
SIterThree.  Iter_Stmt ::= "for" "(" Expression_Stmt Expression_Stmt Exp ")" Stmt;

SJumpOne.  Jump_Stmt ::= "return" Exp ";" ;

SPrintOne.     Print_Stmt ::= "print" Exp ";" ;

SInitOne.      Init_Stmt ::= "init" Ident "[" Exp "]" ";" ;

(:[]).   [Stmt] ::= Stmt ;
(:).     [Stmt] ::= Stmt [Stmt];

EComma.       Exp ::= Exp "," Exp1;
EAssign.      Exp1 ::= Exp4 Assignment_op Exp1;
EEq.          Exp2  ::= Exp2 "==" Exp3;
ENeq.         Exp2  ::= Exp2 "!=" Exp3;
ELthen.       Exp3 ::= Exp3 "<" Exp4;
EGrthen.      Exp3 ::= Exp3 ">" Exp4;
ELe.          Exp3 ::= Exp3 "<=" Exp4;
EGe.          Exp3 ::= Exp3 ">=" Exp4;
EPlus.        Exp4 ::= Exp4 "+" Exp3;
EMinus.       Exp4 ::= Exp4 "-" Exp3;
ETimes.       Exp5 ::= Exp5 "*" Exp4;
EDiv.         Exp5 ::= Exp5 "/" Exp4;
ESelect.      Exp6 ::= Exp6 "." Ident;
EArray.       Exp6 ::= Exp6 "[" Exp "]" ;
EFunk.        Exp6 ::= Exp6 "(" ")";
EFunkPar.     Exp6 ::= Exp6 "(" [Exp1] ")";
EMap.         Exp6 ::= Exp6 "<<" Exp ">>" ;
EPostInc.     Exp7 ::= Exp7 "++";
EPostDec.     Exp7 ::= Exp7 "--";
EVar.         Exp8 ::= Ident;
EConst.       Exp8 ::= Constant;

EInt.         Constant ::= Integer;
ETrue.        Constant ::= "true";
EFalse.        Constant ::= "false";

_. Exp ::= Exp1;
_. Exp1 ::= Exp2;
_. Exp2 ::= Exp3;
_. Exp3 ::= Exp4;
_. Exp4 ::= Exp5;
_. Exp5 ::= Exp6;
_. Exp6 ::= Exp7;
_. Exp7 ::= Exp8;
_. Exp8 ::= "(" Exp ")";

(:[]).   [Exp1] ::= Exp1 ;
(:).     [Exp1] ::= Exp1 "," [Exp1];

Assign.       Assignment_op ::= "=" ;
AssignMul.    Assignment_op ::= "*=" ;
AssignDiv.    Assignment_op ::= "/=" ;
AssignAdd.    Assignment_op ::= "+=" ;
AssignSub.    Assignment_op ::= "-=" ;

comment "/*" "*/" ;
comment "//";
