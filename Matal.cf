-- Aleksander Matusiak
-- EBNF grammar of Matal language

entrypoints Program, Stmt, Exp ;

Progr.  Program ::= [ExternalDeclaration] ;

(:[]).    [ExternalDeclaration] ::= ExternalDeclaration;
(:).      [ExternalDeclaration] ::= ExternalDeclaration [ExternalDeclaration];

Afunc.      ExternalDeclaration ::= FunctionDef ;
Global.     ExternalDeclaration ::= Dec ;
StructDec.  ExternalDeclaration ::= StructSpec;

DVariable.      Declarator ::= TypeSpecifier Ident ;

Declaration.     Dec ::= Declarator ";";

(:[]).   [Dec] ::= Dec ;
(:).     [Dec] ::= Dec [Dec] ;

TVoid.        TypeSpecifier ::= "void";
TInt.         TypeSpecifier ::= "int";
TBool.        TypeSpecifier ::= "bool";
TStruct.      TypeSpecifier ::= Ident;
TArray.       TypeSpecifier ::= TypeSpecifier "[]" ;
TMap.         TypeSpecifier ::= TypeSpecifier "<<" TypeSpecifier ">>" ;

Struct.      StructSpec ::= "struct" Ident "{" [Dec] "}" ;

(:[]).   [Ident] ::= Ident ;
(:).     [Ident] ::= Ident "," [Ident] ;

FuncNoParams.   FunctionDef ::= Declarator "(" ")" CompoundStmt;
FuncParams.   FunctionDef ::= Declarator "(" ParameterDeclarations ")" CompoundStmt;

ParamDec.     ParameterDeclarations ::= Declarator ;
MoreParamDec. ParameterDeclarations ::= ParameterDeclarations "," Declarator ;

SComp.    Stmt ::= CompoundStmt ;
SExpr.    Stmt ::= ExpressionStmt;
SSel.     Stmt ::= SelectionStmt;
SIter.    Stmt ::= IterStmt;
SJump.    Stmt ::= JumpStmt;
SPrint.   Stmt ::= PrintStmt;
SInit.    Stmt ::= InitStmt;

SCompOne.   CompoundStmt ::= "{" "}" ;
SCompTwo.   CompoundStmt ::= "{" [Stmt] "}" ;
SCompThree.  CompoundStmt ::= "{" [Dec] [Stmt] "}" ;

SExprOne.   ExpressionStmt ::= ";" ;
SExprTwo.   ExpressionStmt ::= Exp ";" ;

SSelOne.    SelectionStmt ::= "if" "(" Exp ")" Stmt ;
SSelTwo.    SelectionStmt ::= "if" "(" Exp ")" Stmt "else" Stmt ;

SIterOne.   IterStmt ::= "while" "(" Exp ")" Stmt;
SIterTwo. IterStmt ::= "for" "(" ExpressionStmt ExpressionStmt ")" Stmt ;
SIterThree.  IterStmt ::= "for" "(" ExpressionStmt ExpressionStmt Exp ")" Stmt;

SJumpOne.  JumpStmt ::= "return" Exp ";" ;

SPrintOne.     PrintStmt ::= "print" Exp ";" ;

SInitOne.      InitStmt ::= "init" Ident "[" Exp "]" ";" ;

(:[]).   [Stmt] ::= Stmt ;
(:).     [Stmt] ::= Stmt [Stmt];

EComma.       Exp ::= Exp "," Exp1;
EAssign.      Exp1 ::= Exp4 AssignmentOp Exp1;
EEq.          Exp2  ::= Exp2 "==" Exp3;
ENeq.         Exp2  ::= Exp2 "!=" Exp3;
ELthen.       Exp3 ::= Exp3 "<" Exp4;
EGrthen.      Exp3 ::= Exp3 ">" Exp4;
ELe.          Exp3 ::= Exp3 "<=" Exp4;
EGe.          Exp3 ::= Exp3 ">=" Exp4;
EPlus.        Exp4 ::= Exp4 "+" Exp3;
EMinus.       Exp4 ::= Exp4 "-" Exp3;
ETimes.       Exp5 ::= Exp5 "*" Exp4;
EDiv.         Exp5 ::= Exp5 "/" Exp4;
ESelect.      Exp6 ::= Exp6 "." Ident;
EArray.       Exp6 ::= Exp6 "[" Exp "]" ;
EFunk.        Exp6 ::= Exp6 "(" ")";
EFunkPar.     Exp6 ::= Exp6 "(" [Exp1] ")";
EMap.         Exp6 ::= Exp6 "<<" Exp ">>" ;
EPostInc.     Exp7 ::= Exp7 "++";
EPostDec.     Exp7 ::= Exp7 "--";
EVar.         Exp8 ::= Ident;
EConst.       Exp8 ::= Constant;

EInt.         Constant ::= Integer;
ETrue.        Constant ::= "true";
EFalse.        Constant ::= "false";

_. Exp ::= Exp1;
_. Exp1 ::= Exp2;
_. Exp2 ::= Exp3;
_. Exp3 ::= Exp4;
_. Exp4 ::= Exp5;
_. Exp5 ::= Exp6;
_. Exp6 ::= Exp7;
_. Exp7 ::= Exp8;
_. Exp8 ::= "(" Exp ")";

(:[]).   [Exp1] ::= Exp1 ;
(:).     [Exp1] ::= Exp1 "," [Exp1];

Assign.       AssignmentOp ::= "=" ;
AssignMul.    AssignmentOp ::= "*=" ;
AssignDiv.    AssignmentOp ::= "/=" ;
AssignAdd.    AssignmentOp ::= "+=" ;
AssignSub.    AssignmentOp ::= "-=" ;

comment "/*" "*/" ;
comment "//";
