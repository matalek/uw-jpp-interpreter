module Skelmatal where

-- Haskell module generated by the BNF converter

import Absmatal
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transProgram :: Program -> Result
transProgram x = case x of
  Progr external_declarations  -> failure x


transExternal_declaration :: External_declaration -> Result
transExternal_declaration x = case x of
  Afunc function_def  -> failure x
  Global dec  -> failure x
  StructDec struct_spec  -> failure x


transDeclarator :: Declarator -> Result
transDeclarator x = case x of
  Dvariable type_specifier id  -> failure x


transDec :: Dec -> Result
transDec x = case x of
  Declaration declarator  -> failure x


transType_specifier :: Type_specifier -> Result
transType_specifier x = case x of
  Tvoid  -> failure x
  Tint  -> failure x
  Tbool  -> failure x
  Tstruct id  -> failure x
  Tarray type_specifier  -> failure x
  Tmap type_specifier0 type_specifier  -> failure x


transStruct_spec :: Struct_spec -> Result
transStruct_spec x = case x of
  Struct id decs  -> failure x


transFunction_def :: Function_def -> Result
transFunction_def x = case x of
  FuncNoParams declarator compound_stm  -> failure x
  FuncParams declarator parameter_declarations compound_stm  -> failure x


transParameter_declarations :: Parameter_declarations -> Result
transParameter_declarations x = case x of
  ParamDec declarator  -> failure x
  MoreParamDec parameter_declarations declarator  -> failure x


transStm :: Stm -> Result
transStm x = case x of
  CompS compound_stm  -> failure x
  ExprS expression_stm  -> failure x
  SelS selection_stm  -> failure x
  IterS iter_stm  -> failure x
  JumpS jump_stm  -> failure x
  PrintS print_stm  -> failure x
  InitS init_stm  -> failure x


transCompound_stm :: Compound_stm -> Result
transCompound_stm x = case x of
  ScompOne  -> failure x
  ScompTwo stms  -> failure x
  ScompThree decs stms  -> failure x


transExpression_stm :: Expression_stm -> Result
transExpression_stm x = case x of
  SexprOne  -> failure x
  SexprTwo exp  -> failure x


transSelection_stm :: Selection_stm -> Result
transSelection_stm x = case x of
  SselOne exp stm  -> failure x
  SselTwo exp stm0 stm  -> failure x


transIter_stm :: Iter_stm -> Result
transIter_stm x = case x of
  SiterOne exp stm  -> failure x
  SiterThree expression_stm0 expression_stm stm  -> failure x
  SiterFour expression_stm0 expression_stm exp stm  -> failure x


transJump_stm :: Jump_stm -> Result
transJump_stm x = case x of
  SjumpFive exp  -> failure x


transPrint_stm :: Print_stm -> Result
transPrint_stm x = case x of
  Sprint exp  -> failure x


transInit_stm :: Init_stm -> Result
transInit_stm x = case x of
  Sinit id exp  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  Ecomma exp0 exp  -> failure x
  Eassign exp0 assignment_op exp  -> failure x
  Eeq exp0 exp  -> failure x
  Eneq exp0 exp  -> failure x
  Elthen exp0 exp  -> failure x
  Egrthen exp0 exp  -> failure x
  Ele exp0 exp  -> failure x
  Ege exp0 exp  -> failure x
  Eplus exp0 exp  -> failure x
  Eminus exp0 exp  -> failure x
  Etimes exp0 exp  -> failure x
  Ediv exp0 exp  -> failure x
  Eselect exp id  -> failure x
  Earray exp0 exp  -> failure x
  Efunk exp  -> failure x
  Efunkpar exp exps  -> failure x
  Emap exp0 exp  -> failure x
  Epostinc exp  -> failure x
  Epostdec exp  -> failure x
  Evar id  -> failure x
  Econst constant  -> failure x


transConstant :: Constant -> Result
transConstant x = case x of
  Eint n  -> failure x
  Etrue  -> failure x
  Efalse  -> failure x


transAssignment_op :: Assignment_op -> Result
transAssignment_op x = case x of
  Assign  -> failure x
  AssignMul  -> failure x
  AssignDiv  -> failure x
  AssignAdd  -> failure x
  AssignSub  -> failure x



