-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParMatal where
import AbsMatal
import LexMatal
import ErrM

}

%name pProgram Program

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token 
 '!=' { PT _ (TS _ 1) }
 '(' { PT _ (TS _ 2) }
 ')' { PT _ (TS _ 3) }
 '*' { PT _ (TS _ 4) }
 '*=' { PT _ (TS _ 5) }
 '+' { PT _ (TS _ 6) }
 '++' { PT _ (TS _ 7) }
 '+=' { PT _ (TS _ 8) }
 ',' { PT _ (TS _ 9) }
 '-' { PT _ (TS _ 10) }
 '--' { PT _ (TS _ 11) }
 '-=' { PT _ (TS _ 12) }
 '.' { PT _ (TS _ 13) }
 '/' { PT _ (TS _ 14) }
 '/=' { PT _ (TS _ 15) }
 ';' { PT _ (TS _ 16) }
 '<' { PT _ (TS _ 17) }
 '<<' { PT _ (TS _ 18) }
 '<=' { PT _ (TS _ 19) }
 '=' { PT _ (TS _ 20) }
 '==' { PT _ (TS _ 21) }
 '>' { PT _ (TS _ 22) }
 '>=' { PT _ (TS _ 23) }
 '>>' { PT _ (TS _ 24) }
 '[' { PT _ (TS _ 25) }
 '[]' { PT _ (TS _ 26) }
 ']' { PT _ (TS _ 27) }
 'bool' { PT _ (TS _ 28) }
 'else' { PT _ (TS _ 29) }
 'false' { PT _ (TS _ 30) }
 'for' { PT _ (TS _ 31) }
 'if' { PT _ (TS _ 32) }
 'init' { PT _ (TS _ 33) }
 'int' { PT _ (TS _ 34) }
 'print' { PT _ (TS _ 35) }
 'return' { PT _ (TS _ 36) }
 'struct' { PT _ (TS _ 37) }
 'true' { PT _ (TS _ 38) }
 'void' { PT _ (TS _ 39) }
 'while' { PT _ (TS _ 40) }
 '{' { PT _ (TS _ 41) }
 '}' { PT _ (TS _ 42) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_err    { _ }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

Program :: { Program }
Program : ListExternalDeclaration { Progr $1 } 


ListExternalDeclaration :: { [ExternalDeclaration] }
ListExternalDeclaration : ExternalDeclaration { (:[]) $1 } 
  | ExternalDeclaration ListExternalDeclaration { (:) $1 $2 }


ExternalDeclaration :: { ExternalDeclaration }
ExternalDeclaration : FunctionDef { Afunc $1 } 
  | Dec { Global $1 }
  | StructSpec { StructDec $1 }


Declarator :: { Declarator }
Declarator : TypeSpecifier Ident { DVariable $1 $2 } 


Dec :: { Dec }
Dec : Declarator ';' { Declaration $1 } 


ListDec :: { [Dec] }
ListDec : Dec { (:[]) $1 } 
  | Dec ListDec { (:) $1 $2 }


TypeSpecifier :: { TypeSpecifier }
TypeSpecifier : 'void' { TVoid } 
  | 'int' { TInt }
  | 'bool' { TBool }
  | 'struct' Ident { TStruct $2 }
  | TypeSpecifier '[]' { TArray $1 }
  | TypeSpecifier '<<' TypeSpecifier '>>' { TMap $1 $3 }


StructSpec :: { StructSpec }
StructSpec : 'struct' Ident '{' ListDec '}' { Struct $2 $4 } 


ListIdent :: { [Ident] }
ListIdent : Ident { (:[]) $1 } 
  | Ident ',' ListIdent { (:) $1 $3 }


FunctionDef :: { FunctionDef }
FunctionDef : Declarator '(' ')' FunctionBody { FuncNoParams $1 $4 } 
  | Declarator '(' ParameterDeclarations ')' FunctionBody { FuncParams $1 $3 $5 }


ParameterDeclarations :: { ParameterDeclarations }
ParameterDeclarations : Declarator { ParamDec $1 } 
  | ParameterDeclarations ',' Declarator { MoreParamDec $1 $3 }


FunctionBody :: { FunctionBody }
FunctionBody : '{' 'return' ExpressionStmt '}' { FuncBodyOne $3 } 
  | '{' ListStmt 'return' ExpressionStmt '}' { FuncBodyTwo $2 $4 }
  | '{' ListDec ListStmt 'return' ExpressionStmt '}' { FuncBodyThree $2 $3 $5 }


Stmt :: { Stmt }
Stmt : CompoundStmt { SComp $1 } 
  | ExpressionStmt { SExpr $1 }
  | SelectionStmt { SSel $1 }
  | IterStmt { SIter $1 }
  | PrintStmt { SPrint $1 }
  | InitStmt { SInit $1 }


CompoundStmt :: { CompoundStmt }
CompoundStmt : '{' '}' { SCompOne } 
  | '{' ListStmt '}' { SCompTwo $2 }
  | '{' ListDec ListStmt '}' { SCompThree $2 $3 }


ExpressionStmt :: { ExpressionStmt }
ExpressionStmt : ';' { SExprOne } 
  | Exp ';' { SExprTwo $1 }


SelectionStmt :: { SelectionStmt }
SelectionStmt : 'if' '(' Exp ')' Stmt { SSelOne $3 $5 } 
  | 'if' '(' Exp ')' Stmt 'else' Stmt { SSelTwo $3 $5 $7 }


IterStmt :: { IterStmt }
IterStmt : 'while' '(' Exp ')' Stmt { SIterOne $3 $5 } 
  | 'for' '(' ExpressionStmt ExpressionStmt ')' Stmt { SIterTwo $3 $4 $6 }
  | 'for' '(' ExpressionStmt ExpressionStmt Exp ')' Stmt { SIterThree $3 $4 $5 $7 }


PrintStmt :: { PrintStmt }
PrintStmt : 'print' Exp ';' { SPrintOne $2 } 


InitStmt :: { InitStmt }
InitStmt : 'init' Ident '[' Exp ']' ';' { SInitOne $2 $4 } 


ListStmt :: { [Stmt] }
ListStmt : Stmt { (:[]) $1 } 
  | Stmt ListStmt { (:) $1 $2 }


Exp :: { Exp }
Exp : Exp ',' Exp1 { EComma $1 $3 } 
  | Exp1 { $1 }


Exp1 :: { Exp }
Exp1 : Exp4 AssignmentOp Exp1 { EAssign $1 $2 $3 } 
  | Exp2 { $1 }


Exp2 :: { Exp }
Exp2 : Exp2 '==' Exp3 { EEq $1 $3 } 
  | Exp2 '!=' Exp3 { ENeq $1 $3 }
  | Exp3 { $1 }


Exp3 :: { Exp }
Exp3 : Exp3 '<' Exp4 { ELthen $1 $3 } 
  | Exp3 '>' Exp4 { EGrthen $1 $3 }
  | Exp3 '<=' Exp4 { ELe $1 $3 }
  | Exp3 '>=' Exp4 { EGe $1 $3 }
  | Exp4 { $1 }


Exp4 :: { Exp }
Exp4 : Exp4 '+' Exp3 { EPlus $1 $3 } 
  | Exp4 '-' Exp3 { EMinus $1 $3 }
  | Exp5 { $1 }


Exp5 :: { Exp }
Exp5 : Exp5 '*' Exp4 { ETimes $1 $3 } 
  | Exp5 '/' Exp4 { EDiv $1 $3 }
  | Exp6 { $1 }


Exp6 :: { Exp }
Exp6 : Exp6 '.' Ident { ESelect $1 $3 } 
  | Exp6 '[' Exp ']' { EArray $1 $3 }
  | Exp6 '(' ')' { EFunk $1 }
  | Exp6 '(' ListExp1 ')' { EFunkPar $1 $3 }
  | Exp6 '<<' Exp '>>' { EMap $1 $3 }
  | Exp7 { $1 }


Exp7 :: { Exp }
Exp7 : Exp7 '++' { EPostInc $1 } 
  | Exp7 '--' { EPostDec $1 }
  | Exp8 { $1 }


Exp8 :: { Exp }
Exp8 : Ident { EVar $1 } 
  | Constant { EConst $1 }
  | '(' Exp ')' { $2 }


Constant :: { Constant }
Constant : Integer { EInt $1 } 
  | 'true' { ETrue }
  | 'false' { EFalse }


ListExp1 :: { [Exp] }
ListExp1 : Exp1 { (:[]) $1 } 
  | Exp1 ',' ListExp1 { (:) $1 $3 }


AssignmentOp :: { AssignmentOp }
AssignmentOp : '=' { Assign } 
  | '*=' { AssignMul }
  | '/=' { AssignDiv }
  | '+=' { AssignAdd }
  | '-=' { AssignSub }



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

