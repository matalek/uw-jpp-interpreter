module AbsMatal where

-- Haskell module generated by the BNF converter


newtype Ident = Ident String deriving (Eq,Ord,Show)
data Program =
   Progr [External_declaration]
  deriving (Eq,Ord,Show)

data External_declaration =
   Afunc Function_def
 | Global Dec
 | StructDec Struct_spec
  deriving (Eq,Ord,Show)

data Declarator =
   DVariable Type_specifier Ident
  deriving (Eq,Ord,Show)

data Dec =
   Declaration Declarator
  deriving (Eq,Ord,Show)

data Type_specifier =
   TVoid
 | TInt
 | TBool
 | TStruct Ident
 | TArray Type_specifier
 | TMap Type_specifier Type_specifier
  deriving (Eq,Ord,Show)

data Struct_spec =
   Struct Ident [Dec]
  deriving (Eq,Ord,Show)

data Function_def =
   FuncNoParams Declarator Compound_Stmt
 | FuncParams Declarator Parameter_declarations Compound_Stmt
  deriving (Eq,Ord,Show)

data Parameter_declarations =
   ParamDec Declarator
 | MoreParamDec Parameter_declarations Declarator
  deriving (Eq,Ord,Show)

data Stmt =
   SComp Compound_Stmt
 | SExpr Expression_Stmt
 | SSel Selection_Stmt
 | SIter Iter_Stmt
 | SJump Jump_Stmt
 | SPrint Print_Stmt
 | SInit Init_Stmt
  deriving (Eq,Ord,Show)

data Compound_Stmt =
   SCompOne
 | SCompTwo [Stmt]
 | SCompThree [Dec] [Stmt]
  deriving (Eq,Ord,Show)

data Expression_Stmt =
   SExprOne
 | SExprTwo Exp
  deriving (Eq,Ord,Show)

data Selection_Stmt =
   SSelOne Exp Stmt
 | SSelTwo Exp Stmt Stmt
  deriving (Eq,Ord,Show)

data Iter_Stmt =
   SIterOne Exp Stmt
 | SIterTwo Expression_Stmt Expression_Stmt Stmt
 | SIterThree Expression_Stmt Expression_Stmt Exp Stmt
  deriving (Eq,Ord,Show)

data Jump_Stmt =
   SJumpOne Exp
  deriving (Eq,Ord,Show)

data Print_Stmt =
   SPrintOne Exp
  deriving (Eq,Ord,Show)

data Init_Stmt =
   SInitOne Ident Exp
  deriving (Eq,Ord,Show)

data Exp =
   EComma Exp Exp
 | EAssign Exp Assignment_op Exp
 | EEq Exp Exp
 | ENeq Exp Exp
 | ELthen Exp Exp
 | EGrthen Exp Exp
 | ELe Exp Exp
 | EGe Exp Exp
 | EPlus Exp Exp
 | EMinus Exp Exp
 | ETimes Exp Exp
 | EDiv Exp Exp
 | ESelect Exp Ident
 | EArray Exp Exp
 | EFunk Exp
 | EFunkPar Exp [Exp]
 | EMap Exp Exp
 | EPostInc Exp
 | EPostDec Exp
 | EVar Ident
 | EConst Constant
  deriving (Eq,Ord,Show)

data Constant =
   EInt Integer
 | ETrue
 | EFalse
  deriving (Eq,Ord,Show)

data Assignment_op =
   Assign
 | AssignMul
 | AssignDiv
 | AssignAdd
 | AssignSub
  deriving (Eq,Ord,Show)

