module AbsMatal where

-- Haskell module generated by the BNF converter


newtype Ident = Ident String deriving (Eq,Ord,Show)
data Program =
   Progr [ExternalDeclaration]
  deriving (Eq,Ord,Show)

data ExternalDeclaration =
   Afunc FunctionDef
 | Global Dec
 | StructDec StructSpec
  deriving (Eq,Ord,Show)

data Declarator =
   DVariable TypeSpecifier Ident
  deriving (Eq,Ord,Show)

data Dec =
   Declaration Declarator
  deriving (Eq,Ord,Show)

data TypeSpecifier =
   TVoid
 | TInt
 | TBool
 | TStruct Ident
 | TArray TypeSpecifier
 | TMap TypeSpecifier TypeSpecifier
  deriving (Eq,Ord,Show)

data StructSpec =
   Struct Ident [Dec]
  deriving (Eq,Ord,Show)

data FunctionDef =
   FuncNoParams Declarator FunctionBody
 | FuncParams Declarator ParameterDeclarations FunctionBody
  deriving (Eq,Ord,Show)

data ParameterDeclarations =
   ParamDec Declarator
 | MoreParamDec ParameterDeclarations Declarator
  deriving (Eq,Ord,Show)

data FunctionBody =
   FuncBodyOne [Dec] [Stmt] ExpressionStmt
  deriving (Eq,Ord,Show)

data Stmt =
   SComp CompoundStmt
 | SExpr ExpressionStmt
 | SSel SelectionStmt
 | SIter IterStmt
 | SPrint PrintStmt
 | SInit InitStmt
  deriving (Eq,Ord,Show)

data CompoundStmt =
   SCompOne [Dec] [Stmt]
  deriving (Eq,Ord,Show)

data ExpressionStmt =
   SExprOne
 | SExprTwo Exp
  deriving (Eq,Ord,Show)

data SelectionStmt =
   SSelOne Exp Stmt
 | SSelTwo Exp Stmt Stmt
  deriving (Eq,Ord,Show)

data IterStmt =
   SIterOne Exp Stmt
 | SIterTwo ExpressionStmt ExpressionStmt Stmt
 | SIterThree ExpressionStmt ExpressionStmt Exp Stmt
  deriving (Eq,Ord,Show)

data PrintStmt =
   SPrintOne Exp
  deriving (Eq,Ord,Show)

data InitStmt =
   SInitOne Ident Exp
  deriving (Eq,Ord,Show)

data Exp =
   EComma Exp Exp
 | EAssign Exp AssignmentOp Exp
 | EEq Exp Exp
 | ENeq Exp Exp
 | ELthen Exp Exp
 | EGrthen Exp Exp
 | ELe Exp Exp
 | EGe Exp Exp
 | EPlus Exp Exp
 | EMinus Exp Exp
 | ETimes Exp Exp
 | EDiv Exp Exp
 | ESelect Exp Ident
 | EArray Exp Exp
 | EFunk Exp
 | EFunkPar Exp [Exp]
 | EMap Exp Exp
 | EPostInc Exp
 | EPostDec Exp
 | EVar Ident
 | EConst Constant
  deriving (Eq,Ord,Show)

data Constant =
   EInt Integer
 | ETrue
 | EFalse
  deriving (Eq,Ord,Show)

data AssignmentOp =
   Assign
 | AssignMul
 | AssignDiv
 | AssignAdd
 | AssignSub
  deriving (Eq,Ord,Show)

