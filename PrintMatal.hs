{-# OPTIONS -fno-warn-incomplete-patterns #-}
module PrintMatal where

-- pretty-printer generated by the BNF converter

import AbsMatal
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: [a] -> Doc
  prtList = concatD . map (prt 0)

instance Print a => Print [a] where
  prt _ = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))
  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])



instance Print Program where
  prt i e = case e of
   Progr externaldeclarations -> prPrec i 0 (concatD [prt 0 externaldeclarations])


instance Print ExternalDeclaration where
  prt i e = case e of
   Afunc functiondef -> prPrec i 0 (concatD [prt 0 functiondef])
   Global dec -> prPrec i 0 (concatD [prt 0 dec])
   StructDec structspec -> prPrec i 0 (concatD [prt 0 structspec])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print Declarator where
  prt i e = case e of
   DVariable typespecifier id -> prPrec i 0 (concatD [prt 0 typespecifier , prt 0 id])


instance Print Dec where
  prt i e = case e of
   Declaration declarator -> prPrec i 0 (concatD [prt 0 declarator , doc (showString ";")])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print TypeSpecifier where
  prt i e = case e of
   TVoid  -> prPrec i 0 (concatD [doc (showString "void")])
   TInt  -> prPrec i 0 (concatD [doc (showString "int")])
   TBool  -> prPrec i 0 (concatD [doc (showString "bool")])
   TStruct id -> prPrec i 0 (concatD [doc (showString "struct") , prt 0 id])
   TArray typespecifier -> prPrec i 0 (concatD [prt 0 typespecifier , doc (showString "[]")])
   TMap typespecifier0 typespecifier -> prPrec i 0 (concatD [prt 0 typespecifier0 , doc (showString "<<") , prt 0 typespecifier , doc (showString ">>")])


instance Print StructSpec where
  prt i e = case e of
   Struct id decs -> prPrec i 0 (concatD [doc (showString "struct") , prt 0 id , doc (showString "{") , prt 0 decs , doc (showString "}")])


instance Print FunctionDef where
  prt i e = case e of
   FuncNoParams declarator functionbody -> prPrec i 0 (concatD [prt 0 declarator , doc (showString "(") , doc (showString ")") , prt 0 functionbody])
   FuncParams declarator parameterdeclarations functionbody -> prPrec i 0 (concatD [prt 0 declarator , doc (showString "(") , prt 0 parameterdeclarations , doc (showString ")") , prt 0 functionbody])


instance Print ParameterDeclarations where
  prt i e = case e of
   ParamDec declarator -> prPrec i 0 (concatD [prt 0 declarator])
   MoreParamDec parameterdeclarations declarator -> prPrec i 0 (concatD [prt 0 parameterdeclarations , doc (showString ",") , prt 0 declarator])


instance Print FunctionBody where
  prt i e = case e of
   FuncBodyOne decs stmts expressionstmt -> prPrec i 0 (concatD [doc (showString "{") , prt 0 decs , prt 0 stmts , doc (showString "return") , prt 0 expressionstmt , doc (showString "}")])


instance Print Stmt where
  prt i e = case e of
   SComp compoundstmt -> prPrec i 0 (concatD [prt 0 compoundstmt])
   SExpr expressionstmt -> prPrec i 0 (concatD [prt 0 expressionstmt])
   SSel selectionstmt -> prPrec i 0 (concatD [prt 0 selectionstmt])
   SIter iterstmt -> prPrec i 0 (concatD [prt 0 iterstmt])
   SPrint printstmt -> prPrec i 0 (concatD [prt 0 printstmt])
   SInit initstmt -> prPrec i 0 (concatD [prt 0 initstmt])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print CompoundStmt where
  prt i e = case e of
   SCompOne decs stmts -> prPrec i 0 (concatD [doc (showString "{") , prt 0 decs , prt 0 stmts , doc (showString "}")])


instance Print ExpressionStmt where
  prt i e = case e of
   SExprOne  -> prPrec i 0 (concatD [doc (showString ";")])
   SExprTwo exp -> prPrec i 0 (concatD [prt 0 exp , doc (showString ";")])


instance Print SelectionStmt where
  prt i e = case e of
   SSelOne exp stmt -> prPrec i 0 (concatD [doc (showString "if") , doc (showString "(") , prt 0 exp , doc (showString ")") , prt 0 stmt])
   SSelTwo exp stmt0 stmt -> prPrec i 0 (concatD [doc (showString "if") , doc (showString "(") , prt 0 exp , doc (showString ")") , prt 0 stmt0 , doc (showString "else") , prt 0 stmt])


instance Print IterStmt where
  prt i e = case e of
   SIterOne exp stmt -> prPrec i 0 (concatD [doc (showString "while") , doc (showString "(") , prt 0 exp , doc (showString ")") , prt 0 stmt])
   SIterTwo expressionstmt0 expressionstmt stmt -> prPrec i 0 (concatD [doc (showString "for") , doc (showString "(") , prt 0 expressionstmt0 , prt 0 expressionstmt , doc (showString ")") , prt 0 stmt])
   SIterThree expressionstmt0 expressionstmt exp stmt -> prPrec i 0 (concatD [doc (showString "for") , doc (showString "(") , prt 0 expressionstmt0 , prt 0 expressionstmt , prt 0 exp , doc (showString ")") , prt 0 stmt])


instance Print PrintStmt where
  prt i e = case e of
   SPrintOne exp -> prPrec i 0 (concatD [doc (showString "print") , prt 0 exp , doc (showString ";")])


instance Print InitStmt where
  prt i e = case e of
   SInitOne id exp -> prPrec i 0 (concatD [doc (showString "init") , prt 0 id , doc (showString "[") , prt 0 exp , doc (showString "]") , doc (showString ";")])


instance Print Exp where
  prt i e = case e of
   EComma exp0 exp -> prPrec i 0 (concatD [prt 0 exp0 , doc (showString ",") , prt 1 exp])
   EAssign exp0 assignmentop exp -> prPrec i 1 (concatD [prt 4 exp0 , prt 0 assignmentop , prt 1 exp])
   EEq exp0 exp -> prPrec i 2 (concatD [prt 2 exp0 , doc (showString "==") , prt 3 exp])
   ENeq exp0 exp -> prPrec i 2 (concatD [prt 2 exp0 , doc (showString "!=") , prt 3 exp])
   ELthen exp0 exp -> prPrec i 3 (concatD [prt 3 exp0 , doc (showString "<") , prt 4 exp])
   EGrthen exp0 exp -> prPrec i 3 (concatD [prt 3 exp0 , doc (showString ">") , prt 4 exp])
   ELe exp0 exp -> prPrec i 3 (concatD [prt 3 exp0 , doc (showString "<=") , prt 4 exp])
   EGe exp0 exp -> prPrec i 3 (concatD [prt 3 exp0 , doc (showString ">=") , prt 4 exp])
   EPlus exp0 exp -> prPrec i 4 (concatD [prt 4 exp0 , doc (showString "+") , prt 3 exp])
   EMinus exp0 exp -> prPrec i 4 (concatD [prt 4 exp0 , doc (showString "-") , prt 3 exp])
   ETimes exp0 exp -> prPrec i 5 (concatD [prt 5 exp0 , doc (showString "*") , prt 4 exp])
   EDiv exp0 exp -> prPrec i 5 (concatD [prt 5 exp0 , doc (showString "/") , prt 4 exp])
   ESelect exp id -> prPrec i 6 (concatD [prt 6 exp , doc (showString ".") , prt 0 id])
   EArray exp0 exp -> prPrec i 6 (concatD [prt 6 exp0 , doc (showString "[") , prt 0 exp , doc (showString "]")])
   EFunk exp -> prPrec i 6 (concatD [prt 6 exp , doc (showString "(") , doc (showString ")")])
   EFunkPar exp exps -> prPrec i 6 (concatD [prt 6 exp , doc (showString "(") , prt 1 exps , doc (showString ")")])
   EMap exp0 exp -> prPrec i 6 (concatD [prt 6 exp0 , doc (showString "<<") , prt 0 exp , doc (showString ">>")])
   EPostInc exp -> prPrec i 7 (concatD [prt 7 exp , doc (showString "++")])
   EPostDec exp -> prPrec i 7 (concatD [prt 7 exp , doc (showString "--")])
   EVar id -> prPrec i 8 (concatD [prt 0 id])
   EConst constant -> prPrec i 8 (concatD [prt 0 constant])

  prtList es = case es of
   [x] -> (concatD [prt 1 x])
   x:xs -> (concatD [prt 1 x , doc (showString ",") , prt 1 xs])

instance Print Constant where
  prt i e = case e of
   EInt n -> prPrec i 0 (concatD [prt 0 n])
   ETrue  -> prPrec i 0 (concatD [doc (showString "true")])
   EFalse  -> prPrec i 0 (concatD [doc (showString "false")])


instance Print AssignmentOp where
  prt i e = case e of
   Assign  -> prPrec i 0 (concatD [doc (showString "=")])
   AssignMul  -> prPrec i 0 (concatD [doc (showString "*=")])
   AssignDiv  -> prPrec i 0 (concatD [doc (showString "/=")])
   AssignAdd  -> prPrec i 0 (concatD [doc (showString "+=")])
   AssignSub  -> prPrec i 0 (concatD [doc (showString "-=")])



